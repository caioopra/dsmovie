pasta... / projeto / frontend | backend
Para o fronted: usa estrutura de criação com React (yarn create react-app frontend --template typescript)
	-> deletar .git se criar
	yarn start	=> inicia o projeto
Para o backend: Spring initializr (dependencias: Web, JPA, H2, PostfreSQL, Security)

-> no STS: 
	abrir uma pasta antes do projeto em si
	import -> Maven -> Existing Maven projects -> vai até o backend -> finish
	em pom.xml:
		<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-resources-plugin</artifactId>
			<version>3.1.0</version>
		</plugin>
	botão direito na pasta principal -> Maven -> Update project -> marca caixa que força e atualiza


Limpar projeto React
-> public
	index.html (remove comentários, muda pra pt-br, troca o nome em meta para o que quer e pode colcoar a frase do JS em pt)
-> src
	app.tsx (deixa apenas a criação da função com return de um h1 "Página principal"
	index.css (limpa tudo)
	index.tsx: 
		import React from 'react';
		import ReactDOM from 'react-dom';
		import './index.css';
		import App from './App';

		ReactDOM.render(
		  <React.StrictMode>
			<App />
		  </React.StrictMode>,
		  document.getElementById('root')
		);
	react-app-env.d.ts (nada)


COMMIT


Bootstrap e css ao projeto
-> Bootstrap: framework de css que traz coisas prontas para construção do layout
 
yarn add bootstrap@5.1.3         (versão)
	-> no terminal git do frontend

Arquivo index.css (config básica)
	@import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;700&display=swap');

	:root {
	  --color-primary: #4D41C0;
	}

	* {
		box-sizing: border-box;
		font-family: 'Open Sans', sans-serif;
	}

	html, body {
		background-color: #E5E5E5;
	}

	a, a:hover {
	  text-decoration: none;
	  color: unset;
	}
	
Arquivo index.tsx
	import 'bootstrap/dist/css/bootstrap.css';
	import './index.css';
	

COMMIT


Componente Navbar
-> dentro de index.tsx, há ReactDOM.render, que vai pegar o id de uma div e renderizar os componentes react dentro dela
-> código escrito dentro das funções nos tsx são código JSX (muito parecido com html, mas pode escrever mais coisas)
-> pode criar diversos componentes react, como a navbar
	-> criar pasta components dentro de src
		-> cria subpastas dentro dela para cada componente
		-> cria um index.tsx

<nav className="container"> 		-> do bootstrap



bootstrap: breakpoints 
	-> grid system: tela dividida em 12 partes e pode ocupar de forma customizada
		-> define a partir dos breakpoints, dizendo a partir de determinada largura de tela, ocupar x espaços
		-> em um sistema de row e col
	col-sm-6 col-lg-4 col-xl-3
	-> significa: até tamanho sm, cada um ocupa 6 espaços; até lg, ocupa 4 (mostra 3 por linha); xl ou mais, ocupa 3 (mostra 4 por linha)

-> quando retorna "html" dentro das funções, caso tenha mais de uma para mostrar, precisa estar "encapsulada", pode ser uma div ou ainda apenas com <> </>, que não altera nada mas é aceito

-> colocar variáveis dentro de tags: <... {`variavel`}>